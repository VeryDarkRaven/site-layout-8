/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/compTs/add-loading-attribute-image.js":
/*!******************************************************!*\
  !*** ./src/js/compTs/add-loading-attribute-image.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
function addLoadingAttributeImage() {
    const images = document.querySelectorAll("img:not([data-not-loading])");
    images.forEach((item) => item.loading = "lazy");
}
addLoadingAttributeImage();


/***/ }),

/***/ "./src/js/compTs/burger.js":
/*!*********************************!*\
  !*** ./src/js/compTs/burger.js ***!
  \*********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
function burger() {
    const body = document.querySelector("body");
    const burger = body.querySelector("[data-burger]");
    if (burger) {
        const parent = burger.closest("[data-burger-parent]");
        burger.addEventListener("click", function () {
            burger.classList.toggle("active");
            if (burger.classList.contains("active")) {
                body.classList.add("_lock");
                parent.dataset.burgerParentActive = "";
            }
            else {
                body.classList.remove("_lock");
                parent.removeAttribute("data-burger-parent-active");
            }
        });
    }
}
burger();


/***/ }),

/***/ "./src/js/compTs/change-scroll-header-hidden.js":
/*!******************************************************!*\
  !*** ./src/js/compTs/change-scroll-header-hidden.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
function changeScrollHeaderHidden() {
    const header = document.querySelector("[data-header-scroll-hidden");
    let scrollSpeed = 20;
    if (+header.dataset.headerScrollHidden > 0) {
        scrollSpeed = +header.dataset.headerScrollHidden;
    }
    let scroll = window.scrollY;
    let previousScroll = scroll;
    window.addEventListener("scroll", function () {
        scroll = window.scrollY;
        if (scroll - previousScroll >= scrollSpeed && scroll > 0) {
            header.classList.add("header__hidden");
        }
        else if (scroll - previousScroll <= -scrollSpeed || scroll <= 0) {
            header.classList.remove("header__hidden");
        }
        previousScroll = scroll;
    });
}
document.addEventListener("DOMContentLoaded", changeScrollHeaderHidden);
changeScrollHeaderHidden();


/***/ }),

/***/ "./src/js/compTs/hidden-placeholder.js":
/*!*********************************************!*\
  !*** ./src/js/compTs/hidden-placeholder.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
function hiddenPlaceholder() {
    const containers = document.querySelectorAll("[data-h-ph-container]");
    const items = document.querySelectorAll("[data-h-ph]");
    containers.forEach((item) => {
        const fields = item.querySelectorAll("input, textarea");
        if (fields.length > 0) {
            let field;
            for (field of fields) {
                clickField(field);
            }
        }
    });
    if (items.length > 0) {
        let item;
        for (item of items) {
            clickField(item);
        }
    }
    function clickField(field) {
        field.addEventListener("click", function () {
            const savePlaceholder = this.placeholder;
            const thisElement = this;
            this.setAttribute("placeholder", "");
            document.addEventListener("mouseup", function () {
                thisElement.setAttribute("placeholder", savePlaceholder);
            });
        });
    }
}
window.addEventListener("DOMContentLoaded", hiddenPlaceholder);


/***/ }),

/***/ "./src/js/compTs/mouse-move-parallax.js":
/*!**********************************************!*\
  !*** ./src/js/compTs/mouse-move-parallax.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
function mouseParallax() {
    const parallaxItems = document.querySelectorAll("[data-mprlx]");
    if (parallaxItems) {
        parallaxItems.forEach((item) => {
            const parallaxMouseContainer = item.closest("[data-mprlx-container]");
            let positionX = 0, positionY = 0;
            let coordXprocent = 0, coordYprocent = 0;
            let speed = 0.05;
            let coefficientX = 10;
            let coefficientY = 10;
            const directionMovementX = item.hasAttribute('data-mprlx--x') ? -1 : 1;
            const directionMovementY = item.hasAttribute('data-mprlx--y') ? -1 : 1;
            const directionX = item.hasAttribute('data-mprlx-x') ? 0 : 1;
            const directionY = item.hasAttribute('data-mprlx-y') ? 0 : 1;
            const parallaxTypePosition = item.hasAttribute("data-mprlx-position");
            const parallaxTypeRewrite = item.hasAttribute("data-mprlx-rewrite");
            if (item.dataset.parallaxSpeed || item.dataset.parallaxCof) {
                recordingCustomCoefficients();
            }
            setMouseParallaxStyle();
            parallaxMouseContainer ? mouseMoveParallax(parallaxMouseContainer) : mouseMoveParallax();
            function recordingCustomCoefficients() {
                speed = +item.dataset.parallaxSpeed || 0.05;
                if (typeof (+item.dataset.parallaxCof) !== "number") {
                    let coefficientArr = [];
                    coefficientArr = item.dataset.parallaxCof.split(",").map(item => +item);
                    coefficientX = coefficientArr[0];
                    coefficientY = coefficientArr[1];
                }
                else {
                    let coefficient = +item.dataset.parallaxCof || 10;
                    coefficientX = coefficientY = coefficient;
                }
            }
            function setMouseParallaxStyle() {
                const distX = coordXprocent - positionX;
                const distY = coordYprocent - positionY;
                positionX = positionX + (distX * speed);
                positionY = positionY + (distY * speed);
                if (parallaxTypePosition) {
                    item.style.cssText = `
          top: ${(directionMovementY * positionY / coefficientY) * directionX}%;
          left: ${(directionMovementX * positionX / coefficientX) * directionY}%;
          `;
                }
                else if (parallaxTypeRewrite) {
                    item.style.cssText = `transform: translate(${(directionMovementX * positionX / coefficientX) * directionY}%, ${(directionMovementY * positionY / coefficientY) * directionX}%);`;
                }
                else {
                    item.style.transform = `translate(${(directionMovementX * positionX / coefficientX) * directionY}%, ${(directionMovementY * positionY / coefficientY) * directionX}%)`;
                }
                requestAnimationFrame(setMouseParallaxStyle);
            }
            function mouseMoveParallax(parallaxContainer = window) {
                parallaxContainer.addEventListener("mousemove", mouseMoveParallaxContent);
                function mouseMoveParallaxContent(e) {
                    const offsetTop = item.getBoundingClientRect().top + window.scrollY;
                    if (offsetTop >= window.scrollY || (offsetTop + item.offsetHeight) >= window.scrollY) {
                        let parallaxWidth;
                        let parallaxHeight;
                        let coordX;
                        let coordY;
                        if (parallaxContainer === window) {
                            parallaxWidth = window.innerWidth;
                            parallaxHeight = window.innerHeight;
                            coordX = e.clientX - parallaxWidth / 2;
                            coordY = e.clientY - parallaxHeight / 2;
                        }
                        else if (parallaxContainer instanceof HTMLDivElement) {
                            parallaxWidth = parallaxContainer.clientWidth;
                            parallaxHeight = parallaxContainer.clientHeight;
                            const parallaxContainerRect = parallaxContainer.getBoundingClientRect();
                            coordX = (e.clientX - parallaxContainerRect.left) - parallaxWidth / 2;
                            coordY = (e.clientY - parallaxContainerRect.top) - parallaxHeight / 2;
                        }
                        coordXprocent = coordX / parallaxWidth * 100;
                        coordYprocent = coordY / parallaxHeight * 100;
                    }
                }
            }
        });
    }
}
window.addEventListener("DOMContentLoaded", mouseParallax);


/***/ }),

/***/ "./src/js/compTs/preloader.js":
/*!************************************!*\
  !*** ./src/js/compTs/preloader.js ***!
  \************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
function preloader() {
    const preloaderScreen = document.querySelector("[data-prldr-screen]");
    const preloaderContainer = preloaderScreen.querySelector(".preloader__container");
    const percents = preloaderContainer.querySelector("[data-prldr-percent]");
    const mediaFiles = document.querySelectorAll("img, svg");
    const mediaItems = preloaderScreen.hasAttribute("data-prldr-wh") ? windowHeightMedia(mediaFiles) : mediaFiles;
    let i = 0;
    if (mediaItems.length > 0) {
        mediaItems.forEach((item) => {
            if (item.offsetParent === null) {
                mediaLoading();
            }
            else {
                item.complete ? mediaLoading() : item.onload = () => mediaLoading();
            }
        });
    }
    else {
        mediaLoading(true);
    }
    function mediaLoading(hidden = false) {
        if (i < mediaItems.length) {
            i++;
        }
        if (percents) {
            entryPercent(i);
        }
        if (i === mediaItems.length || hidden === true) {
            document.body.classList.remove("_lock");
            preloaderScreen.classList.add("_hide");
        }
    }
    function windowHeightMedia(list) {
        let windowHeight = document.documentElement.clientHeight;
        const mediaInScreenArr = Array.from(list).filter((item) => {
            let itemBoundingRect = item.getBoundingClientRect();
            if (itemBoundingRect.top >= window.screenY &&
                itemBoundingRect.top <= window.screenY + windowHeight ||
                itemBoundingRect.bottom >= window.screenY &&
                    itemBoundingRect.bottom <= window.screenY + windowHeight) {
                return true;
            }
            else {
                return false;
            }
        });
        return mediaInScreenArr;
    }
    function entryPercent(num = mediaItems.length) {
        const calcPercent = (num * 100) / mediaItems.length;
        num === mediaItems.length ? percents.innerHTML = "100" : percents.innerHTML = `${calcPercent.toFixed(1)}`;
    }
}
window.addEventListener("DOMContentLoaded", preloader);


/***/ }),

/***/ "./src/js/compTs/spawn-animations.js":
/*!*******************************************!*\
  !*** ./src/js/compTs/spawn-animations.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
function spawnAnim() {
    const animItems = document.querySelectorAll("[data-spawn-anim]");
    if (animItems.length > 0) {
        animItems.forEach((item) => {
            const itemHeight = item.offsetHeight;
            const itemOffset = item.getBoundingClientRect().top + window.scrollY;
            const animStart = item.hasAttribute("data-spawn-anim-start") ? +item.dataset.spawnAnimStart : 4;
            let animItemPoint = 0;
            if (itemHeight > window.innerHeight || itemHeight === undefined) {
                animItemPoint = window.innerHeight - window.innerHeight / animStart;
            }
            else {
                animItemPoint = window.innerHeight - itemHeight / animStart;
            }
            window.addEventListener("scroll", animOnScroll);
            animOnScroll();
            function animOnScroll() {
                if (scrollY > itemOffset - animItemPoint && scrollY < itemOffset + itemHeight ||
                    scrollY > itemOffset - animItemPoint && scrollY < itemOffset + window.innerHeight / animStart) {
                    item.classList.add("_anim_active");
                }
                else {
                    if (item.hasAttribute("data-spawn-anim-h")) {
                        item.classList.remove("_anim_active");
                    }
                }
            }
        });
    }
}
function checkForPreloader() {
    const preloader = document.querySelector("[data-prldr-screen]");
    if (preloader && !preloader.classList.contains("_hide")) {
        let checkForPreloader = setInterval(() => {
            if (preloader.classList.contains("_hide")) {
                spawnAnim();
                clearInterval(checkForPreloader);
            }
        }, 300);
    }
    else {
        spawnAnim();
    }
}
document.addEventListener("DOMContentLoaded", checkForPreloader);


/***/ }),

/***/ "./src/js/compTs/spollers.js":
/*!***********************************!*\
  !*** ./src/js/compTs/spollers.js ***!
  \***********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
function spollers() {
    const spollersList = document.querySelectorAll("[data-splrs-container]");
    if (spollersList.length > 0) {
        const spollersRegular = Array.from(spollersList).filter((item) => !item.dataset.splrsContainer.split(",")[0]);
        if (spollersRegular.length) {
            initSpollers(spollersRegular);
        }
        let spollersMediaQueriesArr = dataMediaQueries(spollersList, "splrsContainer");
        if (spollersMediaQueriesArr && spollersMediaQueriesArr.length) {
            spollersMediaQueriesArr.forEach((item) => {
                item.matchMedia.addEventListener("change", () => {
                    initSpollers(item.itemsArr, item.matchMedia);
                });
                initSpollers(item.itemsArr, item.matchMedia);
            });
        }
        function initSpollers(spollersItemsArr, matchMedia = false) {
            spollersItemsArr.forEach((spollersItem) => {
                let spollersContainer = "item" in spollersItem ? spollersItem.item : spollersItem;
                if (matchMedia instanceof MediaQueryList || !matchMedia) {
                    spollersContainer.classList.add('_spoller-init');
                    initSpollerBody(spollersContainer);
                    spollersContainer.addEventListener("click", setSpollerAction);
                }
                else {
                    spollersContainer.classList.remove("_spoller-init");
                    initSpollerBody(spollersContainer, false);
                    spollersContainer.removeEventListener("click", setSpollerAction);
                }
            });
        }
        function initSpollerBody(spollersContainer, hideSpollerBody = true) {
            let spollerTitles = spollersContainer.querySelectorAll("[data-splr]");
            if (spollerTitles.length) {
                let spollerTitlesArr = Array.from(spollerTitles).filter((item) => item.closest("[data-splrs-container]") === spollersContainer);
                spollerTitlesArr.forEach((item) => {
                    let itemNextElem = item.nextElementSibling;
                    if (hideSpollerBody) {
                        item.removeAttribute("tabindex");
                        if (!item.classList.contains('_spoller-active')) {
                            itemNextElem.hidden = true;
                        }
                    }
                    else {
                        item.setAttribute('tabindex', '-1');
                        itemNextElem.hidden = false;
                    }
                });
            }
        }
        function setSpollerAction(e) {
            const el = e.target;
            if (el.closest("[data-splr]")) {
                const spollerTitle = el.closest("[data-splr]");
                const spollerContainer = spollerTitle.closest("[data-splrs-container]");
                const oneSpoller = spollerContainer.hasAttribute("data-splrs-one");
                const spollerSpeed = spollerContainer.dataset.splrsSpeed ? parseInt(spollerContainer.dataset.splrsSpeed) : 500;
                if (!spollerContainer.querySelectorAll("._slide").length) {
                    if (oneSpoller && !spollerTitle.classList.contains('_spoller-active')) {
                        hideSpollersBody(spollerContainer);
                    }
                    spollerTitle.classList.toggle('_spoller-active');
                    _slideToggle(spollerTitle.nextElementSibling, spollerSpeed);
                }
                e.preventDefault();
            }
        }
        function hideSpollersBody(spollerContainer) {
            console.log("hide");
            const spollerActiveTitle = spollerContainer.querySelector('[data-splr]._spoller-active');
            const spollerSpeed = spollerContainer.dataset.splrsSpeed ? parseInt(spollerContainer.dataset.splrsSpeed) : 500;
            if (spollerActiveTitle && !spollerContainer.querySelectorAll('._slide').length) {
                spollerActiveTitle.classList.remove('_spoller-active');
                _slideUp(spollerActiveTitle.nextElementSibling, spollerSpeed);
            }
        }
        const spollersClose = document.querySelectorAll('[data-splr-close]');
        if (spollersClose.length) {
            document.addEventListener("click", (e) => {
                const el = e.target;
                if (!el.closest('[data-splrs-container]')) {
                    spollersClose.forEach((item) => {
                        const spollerContainer = item.closest('[data-splrs-container]');
                        const spollerSpeed = spollerContainer.dataset.splrsSpeed ? parseInt(spollerContainer.dataset.splrsSpeed) : 500;
                        item.classList.remove('_spoller-active');
                        _slideUp(item.nextElementSibling, spollerSpeed);
                    });
                }
            });
        }
    }
}
spollers();
function dataMediaQueries(list, dataName) {
    const mediaArr = Array.from(list).filter((item) => item.dataset.splrsContainer.split(",")[0]);
    if (mediaArr.length) {
        const breakpointsArr = [];
        mediaArr.forEach((item) => {
            const breakpointParams = item.dataset[dataName];
            const breakpointParamsArr = breakpointParams.split(",");
            const breakpoint = {
                value: +breakpointParamsArr[0],
                type: breakpointParamsArr[1] ? breakpointParamsArr[1].trim() : "max",
                item: item
            };
            breakpointsArr.push(breakpoint);
        });
        let mediaQueries = breakpointsArr.map((item) => {
            return '(' + item.type + "-width: " + item.value + "px)," + item.value + ',' + item.type;
        });
        mediaQueries = uniqArray(mediaQueries);
        const mediaQueriesArr = [];
        if (mediaQueries.length) {
            mediaQueries.forEach((breakpoint) => {
                const paramsArray = breakpoint.split(",");
                const mediaBreakpoint = +paramsArray[1];
                const mediaType = paramsArray[2];
                const matchMedia = window.matchMedia(paramsArray[0]);
                const itemsArr = breakpointsArr.filter((item) => {
                    if (item.value === mediaBreakpoint && item.type === mediaType) {
                        return true;
                    }
                });
                mediaQueriesArr.push({ itemsArr, matchMedia });
            });
            return mediaQueriesArr;
        }
    }
}
function uniqArray(arr) {
    return arr.filter((item, index, arr) => arr.indexOf(item) === index);
}
let _slideUp = (target, duration = 500, showmore = 0) => {
    if (!target.classList.contains('_slide')) {
        target.classList.add('_slide');
        target.style.transitionProperty = 'height, margin, padding';
        target.style.transitionDuration = duration + 'ms';
        target.style.height = `${target.offsetHeight}px`;
        target.offsetHeight;
        target.style.overflow = 'hidden';
        target.style.height = showmore ? `${showmore}px` : `0px`;
        target.style.paddingTop = "0";
        target.style.paddingBottom = "0";
        target.style.marginTop = "0";
        target.style.marginBottom = "0";
        window.setTimeout(() => {
            target.hidden = !showmore ? true : false;
            !showmore ? target.style.removeProperty('height') : null;
            target.style.removeProperty('padding-top');
            target.style.removeProperty('padding-bottom');
            target.style.removeProperty('margin-top');
            target.style.removeProperty('margin-bottom');
            !showmore ? target.style.removeProperty('overflow') : null;
            target.style.removeProperty('transition-duration');
            target.style.removeProperty('transition-property');
            target.classList.remove('_slide');
            // Создаем событие 
            document.dispatchEvent(new CustomEvent("slideUpDone", {
                detail: {
                    target: target
                }
            }));
        }, duration);
    }
};
let _slideDown = (target, duration = 500, showmore = 0) => {
    if (!target.classList.contains('_slide')) {
        target.classList.add('_slide');
        target.hidden = target.hidden ? false : null;
        showmore ? target.style.removeProperty('height') : null;
        let height = target.offsetHeight;
        target.style.overflow = 'hidden';
        target.style.height = showmore ? `${showmore}px` : `0px`;
        target.style.paddingTop = "0";
        target.style.paddingBottom = "0";
        target.style.marginTop = "0";
        target.style.marginBottom = "0";
        target.offsetHeight;
        target.style.transitionProperty = "height, margin, padding";
        target.style.transitionDuration = duration + 'ms';
        target.style.height = height + 'px';
        target.style.removeProperty('padding-top');
        target.style.removeProperty('padding-bottom');
        target.style.removeProperty('margin-top');
        target.style.removeProperty('margin-bottom');
        window.setTimeout(() => {
            target.style.removeProperty('height');
            target.style.removeProperty('overflow');
            target.style.removeProperty('transition-duration');
            target.style.removeProperty('transition-property');
            target.classList.remove('_slide');
            // Создаем событие 
            document.dispatchEvent(new CustomEvent("slideDownDone", {
                detail: {
                    target: target
                }
            }));
        }, duration);
    }
};
let _slideToggle = (target, duration = 500) => {
    if (target.hidden) {
        return _slideDown(target, duration);
    }
    else {
        return _slideUp(target, duration);
    }
};


/***/ }),

/***/ "./src/js/compTs/video-player.js":
/*!***************************************!*\
  !*** ./src/js/compTs/video-player.js ***!
  \***************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
function videoPlayer() {
    const players = document.querySelectorAll("[data-vp-container]");
    if (players.length > 0) {
        players.forEach((item) => {
            const player = item;
            const video = player.querySelector("[data-vp-video]");
            const controlContainer = player.querySelector(".video__control-container");
            const linesContainer = controlContainer.querySelector(".control__lines");
            let previousVolumeNum = 1;
            initVideoListeners();
            initPlayerListeners();
            initTimelineListeners();
            function initVideoListeners() {
                video.addEventListener("click", toggleVideo);
                video.addEventListener("volumechange", updateVolume);
                video.addEventListener("dblclick", toggleFullscreen);
                video.addEventListener("loadedmetadata", () => {
                    setVideoDuration();
                    updateVolume();
                });
                video.addEventListener("timeupdate", () => {
                    setVideoDuration();
                    toggleInterface();
                });
            }
            function initPlayerListeners() {
                player.addEventListener("fullscreenchange", checkFullscreen);
                player.addEventListener("mousemove", checkInterface);
                player.addEventListener("click", function () {
                    window.addEventListener("click", clickOutPlayer);
                    document.addEventListener("keydown", playerKeyDown);
                });
                player.querySelector(".playback__container").addEventListener("click", toggleVideo);
                player.querySelector(".control__full").addEventListener("click", toggleFullscreen);
                player.querySelector(".volume__icon-container").addEventListener("click", function () {
                    if (video.volume !== 0) {
                        previousVolumeNum = video.volume;
                        video.volume = 0;
                    }
                    else {
                        video.volume = previousVolumeNum;
                        previousVolumeNum = 0;
                    }
                });
                player.querySelector(".volume__lines-container").addEventListener("click", function (e) {
                    const { bottom } = e.target.getBoundingClientRect();
                    video.volume = calcVolumeLine(e, bottom);
                });
            }
            function initTimelineListeners() {
                linesContainer.addEventListener("mousemove", calcGhostLine);
                linesContainer.addEventListener("click", function (e) {
                    const { left } = e.target.getBoundingClientRect();
                    video.currentTime = calcNeededLine(e, left);
                });
            }
            function toggleVideo() {
                if (video.paused) {
                    player.classList.add("play");
                    video.play();
                }
                else {
                    player.classList.remove("play");
                    video.pause();
                }
            }
            function setVideoDuration() {
                const duration = +video.duration.toFixed();
                const current = +video.currentTime.toFixed();
                const newTime = `${formatTime(current)} / ${formatTime(duration)}`;
                const durationContainer = controlContainer.querySelector(".control__duration").querySelector("p");
                linesContainer.querySelector(".line_current").style.width = `${current / (duration / 100)}%`;
                if (durationContainer.innerHTML !== newTime) {
                    durationContainer.innerHTML = newTime;
                }
            }
            function formatTime(seconds) {
                return `${Math.floor(seconds / 60)}:${fixNumber(Math.floor(seconds % 60))}`;
            }
            function fixNumber(number) {
                return number < 10 ? `0${number}` : `${number}`;
            }
            function updateVolume() {
                const volumeContainer = controlContainer.querySelector("[data-vp-volume]");
                player.querySelector(".volume__line_currect").style.height = video.volume * 100 + "%";
                if (video.volume > 0.66) {
                    volumeContainer.dataset.vpVolume = "up";
                }
                else if (video.volume > 0.33) {
                    volumeContainer.dataset.vpVolume = "down";
                }
                else if (video.volume > 0) {
                    volumeContainer.dataset.vpVolume = "mute";
                }
                else if (video.volume === 0) {
                    volumeContainer.dataset.vpVolume = "off";
                }
            }
            function toggleFullscreen() {
                if (document.fullscreenElement) {
                    document.exitFullscreen();
                }
                else {
                    player.requestFullscreen();
                }
            }
            function checkFullscreen() {
                let isFullscreen = Boolean(document.fullscreenElement);
                isFullscreen ? player.classList.add("fullscreen") : player.classList.remove("fullscreen");
            }
            let isHiddenInterface = false;
            function toggleInterface() {
                if (isHiddenInterface) {
                    player.classList.add("hidden-interface");
                }
                else {
                    player.classList.remove("hidden-interface");
                }
            }
            let timeout = null;
            function checkInterface() {
                isHiddenInterface = false;
                if (timeout) {
                    clearTimeout(timeout);
                    timeout = null;
                }
                timeout = setTimeout(function () { isHiddenInterface = true; }, 3000);
            }
            function calcGhostLine(e) {
                const hint = linesContainer.querySelector(".control__hint");
                const lineHover = linesContainer.querySelector(".line_hover");
                const { left } = e.target.getBoundingClientRect();
                hint.innerHTML = formatTime(calcNeededLine(e, left));
                hint.style.left = `${e.clientX - (left + (hint.offsetWidth / 2))}px`;
                lineHover.style.width = `${e.clientX - left}px`;
            }
            function calcNeededLine(e, left) {
                const needPercent = ((e.clientX - left) / e.target.offsetWidth);
                return video.duration * needPercent;
            }
            function calcVolumeLine(e, bottom) {
                const needPercent = (Math.abs((e.clientY - bottom)) / e.target.offsetHeight);
                return needPercent;
            }
            function clickOutPlayer(e) {
                if (!e.target.closest("[data-vp-container]")) {
                    window.removeEventListener("click", clickOutPlayer);
                    document.removeEventListener("keydown", playerKeyDown);
                }
            }
            function playerKeyDown(e) {
                if (e.code === 'Space') {
                    e.preventDefault();
                    toggleVideo();
                }
                else if (e.code === 'ArrowRight') {
                    video.currentTime += 5;
                }
                else if (e.code === 'ArrowLeft') {
                    video.currentTime -= 5;
                }
            }
        });
    }
}
window.addEventListener("DOMContentLoaded", videoPlayer);


/***/ }),

/***/ "./src/js/modules/change-scroll-header-bg-color.js":
/*!*********************************************************!*\
  !*** ./src/js/modules/change-scroll-header-bg-color.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
function changeScrollHeaderBGColor () {
  const header = document.querySelector(".header");

  let scroll = window.scrollY;

  if (scroll > 0) {
    header.classList.add("header__bg_grey");
  } else {
    header.classList.remove("header__bg_grey");
  }
}

document.addEventListener("DOMContentLoaded", changeScrollHeaderBGColor);
window.addEventListener("scroll", changeScrollHeaderBGColor);

changeScrollHeaderBGColor();

/***/ }),

/***/ "./src/js/modules/courses-actions-buttons.js":
/*!***************************************************!*\
  !*** ./src/js/modules/courses-actions-buttons.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
function coursesActionsButtonsClick () {
  const courses = document.querySelector(".courses");
  const articles = courses.querySelector(".courses__items").querySelectorAll(".item");

  articles.forEach(item => {
    const buttonsContainer = item.querySelector(".item__actions");
    const buttons = buttonsContainer.querySelectorAll("button");

    buttons.forEach(item => item.addEventListener("click", () => item.classList.toggle("active")));
  })
}

coursesActionsButtonsClick();

/***/ }),

/***/ "./src/js/modules/header-nav-item-click.js":
/*!*************************************************!*\
  !*** ./src/js/modules/header-nav-item-click.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
function headerNavItemClick () {
  const header = document.querySelector(".header");
  const nav = header.querySelector(".header__nav");
  const items = nav.querySelectorAll("a");

  for(let item of items) {
    item.addEventListener("click", function() {
      if (!item.classList.item("active")) {
        for (let i = 0; i < items.length; i++) {
          if (items[i] !== item) {
            items[i].classList.remove("active");
          }
        }

        item.classList.add("active");
      }
    })
  }
}

headerNavItemClick();

/***/ }),

/***/ "./src/js/modules/hidden-placeholder.js":
/*!**********************************************!*\
  !*** ./src/js/modules/hidden-placeholder.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
function hiddenPlaceholder () {
  const containers = document.querySelectorAll("[data-h-ph-container]");
  const items = document.querySelectorAll("[data-h-ph]");

  containers.forEach(item => {
    const fields = item.querySelectorAll("input, textarea");

    if (fields.length > 0) {
      for (let field of fields) {
        clickField(field);
      }
    }
  })

  if (items.length > 0) {
    for (let item of items) {
      clickField(item);
    }
  }

  function clickField (field) {
    field.addEventListener("click", function() {
      const savePlaceholder = this.placeholder;
      const thisElement = this;

      this.setAttribute("placeholder", "");
      document.addEventListener("mouseup", function() {
        thisElement.setAttribute("placeholder", savePlaceholder);
      })
    })
  }
}

hiddenPlaceholder();

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!***********************!*\
  !*** ./src/js/app.js ***!
  \***********************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _compTs_burger_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./compTs/burger.js */ "./src/js/compTs/burger.js");
/* harmony import */ var _compTs_preloader_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./compTs/preloader.js */ "./src/js/compTs/preloader.js");
/* harmony import */ var _compTs_hidden_placeholder_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./compTs/hidden-placeholder.js */ "./src/js/compTs/hidden-placeholder.js");
/* harmony import */ var _compTs_change_scroll_header_hidden_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./compTs/change-scroll-header-hidden.js */ "./src/js/compTs/change-scroll-header-hidden.js");
/* harmony import */ var _compTs_spawn_animations_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./compTs/spawn-animations.js */ "./src/js/compTs/spawn-animations.js");
/* harmony import */ var _compTs_spollers_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./compTs/spollers.js */ "./src/js/compTs/spollers.js");
/* harmony import */ var _compTs_mouse_move_parallax_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./compTs/mouse-move-parallax.js */ "./src/js/compTs/mouse-move-parallax.js");
/* harmony import */ var _compTs_video_player_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./compTs/video-player.js */ "./src/js/compTs/video-player.js");
/* harmony import */ var _compTs_add_loading_attribute_image_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./compTs/add-loading-attribute-image.js */ "./src/js/compTs/add-loading-attribute-image.js");
/* harmony import */ var _modules_change_scroll_header_bg_color_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./modules/change-scroll-header-bg-color.js */ "./src/js/modules/change-scroll-header-bg-color.js");
/* harmony import */ var _modules_header_nav_item_click_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./modules/header-nav-item-click.js */ "./src/js/modules/header-nav-item-click.js");
/* harmony import */ var _modules_courses_actions_buttons_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./modules/courses-actions-buttons.js */ "./src/js/modules/courses-actions-buttons.js");
/* harmony import */ var _modules_hidden_placeholder_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./modules/hidden-placeholder.js */ "./src/js/modules/hidden-placeholder.js");











// import "./modules/preloader.js";
// import "./modules/mouse-move-parallax.js";

// import "./modules/change-scroll-header-hidden.js";

// import "./modules/burger.js";
// import "./modules/video-player.js";


// import "./modules/spollers.js";
// import "./modules/spawn-animations.js";
})();

/******/ })()
;