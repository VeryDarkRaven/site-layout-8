/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/modules/burger.js":
/*!**********************************!*\
  !*** ./src/js/modules/burger.js ***!
  \**********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
function burger () {
  const body = document.querySelector("body");
  const burger = document.querySelector("[data-burger]");
  const parent = burger.closest("[data-burger-parent]");

  burger.addEventListener("click", function() {
    burger.classList.toggle("active");
    
    if (burger.classList.contains("active")) {
      body.style.overflowY = "hidden";

      parent.dataset.burgerParentActive = "";
    } else {
      body.style.overflowY = "";

      parent.removeAttribute("data-burger-parent-active");
    }
  });
}

burger();

/***/ }),

/***/ "./src/js/modules/change-scroll-header-bg-color.js":
/*!*********************************************************!*\
  !*** ./src/js/modules/change-scroll-header-bg-color.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
function changeScrollHeaderBGColor () {
  const header = document.querySelector(".header");

  let scroll = window.scrollY;

  if (scroll > 0) {
    header.classList.add("header__bg_grey");
  } else {
    header.classList.remove("header__bg_grey");
  }
}

document.addEventListener("DOMContentLoaded", changeScrollHeaderBGColor);
window.addEventListener("scroll", changeScrollHeaderBGColor);

changeScrollHeaderBGColor();

/***/ }),

/***/ "./src/js/modules/change-scroll-header-hidden.js":
/*!*******************************************************!*\
  !*** ./src/js/modules/change-scroll-header-hidden.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
function changeScrollHeaderHidden () {
  const header = document.querySelector("[data-header-scroll-hidden");

  let scrollSpeed = 20;

  if (+header.dataset.headerScrollHidden > 0) {
    scrollSpeed = +header.dataset.headerScrollHidden;
  }

  let scroll = window.scrollY;
  let previousScroll = scroll;

  window.addEventListener("scroll", function() {
    let scroll = window.scrollY;

    if (scroll - previousScroll >= scrollSpeed && scroll > 0) {
      header.classList.add("header__hidden");
    } else if (scroll - previousScroll <= -scrollSpeed || scroll <= 0) {
      header.classList.remove("header__hidden");
    }

    previousScroll = scroll;
  })
}

document.addEventListener("DOMContentLoaded", changeScrollHeaderHidden);

changeScrollHeaderHidden();

/***/ }),

/***/ "./src/js/modules/courses-actions-buttons.js":
/*!***************************************************!*\
  !*** ./src/js/modules/courses-actions-buttons.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
function coursesActionsButtonsClick () {
  const courses = document.querySelector(".courses");
  const articles = courses.querySelector(".courses__items").querySelectorAll(".item");

  articles.forEach(item => {
    const buttonsContainer = item.querySelector(".item__actions");
    const buttons = buttonsContainer.querySelectorAll("button");

    buttons.forEach(item => item.addEventListener("click", () => item.classList.toggle("active")));
  })
}

coursesActionsButtonsClick();

/***/ }),

/***/ "./src/js/modules/header-nav-item-click.js":
/*!*************************************************!*\
  !*** ./src/js/modules/header-nav-item-click.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
function headerNavItemClick () {
  const header = document.querySelector(".header");
  const nav = header.querySelector(".header__nav");
  const items = nav.querySelectorAll("a");

  for(let item of items) {
    item.addEventListener("click", function() {
      if (!item.classList.item("active")) {
        for (let i = 0; i < items.length; i++) {
          if (items[i] !== item) {
            items[i].classList.remove("active");
          }
        }

        item.classList.add("active");
      }
    })
  }
}

headerNavItemClick();

/***/ }),

/***/ "./src/js/modules/mouse-move-parallax.js":
/*!***********************************************!*\
  !*** ./src/js/modules/mouse-move-parallax.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
function mouseParallax () {
  const parallaxItems = document.querySelectorAll("[data-mprlx]");

  if (parallaxItems) {
    parallaxItems.forEach(item => {
      const parallaxMouseContainer = item.closest("[data-mprlx-container]");

      let positionX = 0, positionY = 0;
      let coordXprocent = 0, coordYprocent = 0;

      let speed = 0.05;

      let coefficientX = 10;
      let coefficientY = 10;

			const directionMovementX = item.hasAttribute('data-mprlx--x') ? -1 : 1;
			const directionMovementY = item.hasAttribute('data-mprlx--y') ? -1 : 1;

			const directionX = item.hasAttribute('data-mprlx-x') ? 0 : 1;
			const directionY = item.hasAttribute('data-mprlx-y') ? 0 : 1;



      if (item.dataset.parallaxSpeed || item.dataset.parallaxCof) {
        recordingCustomCoefficients();
      }
  
      function recordingCustomCoefficients () {
        speed = +item.dataset.parallaxSpeed || 0.05;
  
        if (typeof(+item.dataset.parallaxCof) !== "number") {
          let coefficientArr = [];
  
          coefficientArr = item.dataset.parallaxCof.split(",").forEach(item => +item);
  
          coefficientX = coefficientArr[0];
          coefficientY = coefficientArr[1];
        } else {
          let coefficient = +item.dataset.parallaxCof || 10;
  
          coefficientX = coefficientY = coefficient;
        }
      }



      function setMouseParallaxStyle () {
        const distX = coordXprocent - positionX;
        const distY = coordYprocent - positionY;

        positionX = positionX + (distX * speed);
        positionY = positionY + (distY * speed);

        item.style.cssText = `transform: translate(${(directionMovementX * positionX / coefficientX) * directionY}%, ${(directionMovementY * positionY / coefficientY) * directionX}%);`;

        requestAnimationFrame(setMouseParallaxStyle);
      }

      function mouseMoveParallax (parallaxContainer = window) {
        parallaxContainer.addEventListener("mousemove", mouseMoveParallaxContent);
  
        function mouseMoveParallaxContent (e) {
          const offsetTop = item.getBoundingClientRect().top + window.scrollY;
          if (offsetTop >= window.scrollY || (offsetTop + item.offsetHeight) >= window.scrollY)  {
            const parallaxWidth = window.innerWidth;
            const parallaxHeight = window.innerHeight;
  
            const coordX = e.clientX - parallaxWidth / 2;
            const coordY = e.clientY - parallaxHeight / 2;
  
            coordXprocent = coordX / parallaxWidth * 100;
            coordYprocent = coordY / parallaxHeight * 100;
          }
        }
      }

      setMouseParallaxStyle();

			parallaxMouseContainer ? mouseMoveParallax(parallaxMouseContainer) : mouseMoveParallax();
    })
  }
}

window.addEventListener("DOMContentLoaded", mouseParallax);

/***/ }),

/***/ "./src/js/modules/video-player.js":
/*!****************************************!*\
  !*** ./src/js/modules/video-player.js ***!
  \****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
function videoPlayer () {
  const players = document.querySelectorAll("[data-vp-container]");
  players.forEach(item => {
    const player = item;
    const video = player.querySelector("[data-vp-video]");
    const controlContainer = player.querySelector(".video__control-container");
    const linesContainer = controlContainer.querySelector(".control__lines");

    let previousVolumeNum = 1;

    initVideoListeners();
    initPlayerListeners();
    initTimelineListeners();

    function initVideoListeners () {
      video.addEventListener("click", toggleVideo);
      video.addEventListener("volumechange", updateVolume);
      video.addEventListener("dblclick", toggleFullscreen);
      video.addEventListener("loadedmetadata", () => {
        setVideoDuration();
        updateVolume();
      });
      video.addEventListener("timeupdate", () => {
        setVideoDuration();
        toggleInterface();
      });
    }

    function initPlayerListeners () {
      player.addEventListener("fullscreenchange", checkFullscreen);
      player.addEventListener("mousemove", checkInterface);
      player.addEventListener("click", function() {
        window.addEventListener("click", clickOutPlayer);
        document.addEventListener("keydown", playerKeyDown);
      });
      player.querySelector(".playback__container").addEventListener("click", toggleVideo);
      player.querySelector(".control__full").addEventListener("click", toggleFullscreen);
      player.querySelector(".volume__icon-container").addEventListener("click", function() {
        if (video.volume !== 0) {
          previousVolumeNum = video.volume;
          video.volume = 0;
        } else {
          video.volume = previousVolumeNum;
          previousVolumeNum = 0;
        }
      });
      player.querySelector(".volume__lines-container").addEventListener("click", function(e) {
        const {bottom} = e.target.getBoundingClientRect();
        video.volume = calcVolumeLine(e, bottom);
      });
    }

    function initTimelineListeners () {
      linesContainer.addEventListener("mousemove", calcGhostLine);
      linesContainer.addEventListener("click", function(e) {
        const {left} = e.target.getBoundingClientRect();
        video.currentTime = calcNeededLine(e, left);
      })
    }



    function toggleVideo () {
      if (video.paused) {
        player.classList.add("play");
        video.play();
      } else {
        player.classList.remove("play");
        video.pause();
      }
    }

    function setVideoDuration () {
      const duration = +video.duration.toFixed();
      const current = +video.currentTime.toFixed();
      const newTime = `${formatTime(current)} / ${formatTime(duration)}`;
      const durationContainer = controlContainer.querySelector(".control__duration").querySelector("p");

      linesContainer.querySelector(".line_current").style.width = `${current / (duration / 100)}%`;

      if (durationContainer.innerHTML !== newTime) {
        durationContainer.innerHTML = newTime;
      }
    }

    function formatTime(seconds) {
      return `${Math.floor(seconds / 60)}:${fixNumber(Math.floor(seconds % 60))}`;
    }

    function fixNumber(number) {
      return number < 10 ? `0${number}` : `${number}`;
    }

    function updateVolume () {
      const volumeContainer = controlContainer.querySelector("[data-vp-volume]");

      player.querySelector(".volume__line_currect").style.height = video.volume * 100 + "%";

      if (video.volume > 0.66) {
        volumeContainer.dataset.vpVolume = "up";
      } else if (video.volume > 0.33) {
        volumeContainer.dataset.vpVolume = "down";
      } else if (video.volume > 0) {
        volumeContainer.dataset.vpVolume = "mute";
      } else if (video.volume === 0) {
        volumeContainer.dataset.vpVolume = "off";
      }
    }

    function toggleFullscreen () {
      if (document.fullscreenElement) {
        document.exitFullscreen();
      } else {
        player.requestFullscreen();
      }
    }

    function checkFullscreen () {
      let isFullscreen = Boolean(document.fullscreenElement);
      isFullscreen ? player.classList.add("fullscreen") : player.classList.remove("fullscreen");
    }

    let isHiddenInterface = false;

    function toggleInterface () {
      if (isHiddenInterface) {
        player.classList.add("hidden-interface");
      } else {
        player.classList.remove("hidden-interface");
      }
    }

    let timeout = null;

    function checkInterface () {
      isHiddenInterface = false;

      if (timeout) {
        clearTimeout(timeout);

        timeout = null;
      }

      timeout = setTimeout(function() {isHiddenInterface = true}, 3000);
    }

    function calcGhostLine (e) {
      const hint = linesContainer.querySelector(".control__hint");
      const lineHover = linesContainer.querySelector(".line_hover");

      const {left} = e.target.getBoundingClientRect();

      hint.innerHTML = formatTime(calcNeededLine(e, left));
      hint.style.left = `${e.clientX - (left + (hint.offsetWidth / 2))}px`;
      lineHover.style.width = `${e.clientX - left}px`;
    }

    function calcNeededLine (e, left) {
      const needPercent = ((e.clientX - left) / e.target.offsetWidth);
      return video.duration * needPercent;
    }

    function calcVolumeLine (e, bottom) {
      const needPercent = (Math.abs((e.clientY - bottom)) / e.target.offsetHeight);
      return needPercent;
    }



    function clickOutPlayer (e) {
      if (!e.target.closest("[data-vp-container]")) {
        window.removeEventListener("click", clickOutPlayer);
        document.removeEventListener("keydown", playerKeyDown);
      }
    }

    function playerKeyDown (e) {
      if (e.code === 'Space') {
        e.preventDefault();
        toggleVideo();
      } else if (e.code === 'ArrowRight') {
        video.currentTime += 5;
      } else if (e.code === 'ArrowLeft') {
        video.currentTime -= 5;
      }
    }
  })
}

window.addEventListener("DOMContentLoaded", videoPlayer);

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!***********************!*\
  !*** ./src/js/app.js ***!
  \***********************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _modules_mouse_move_parallax_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modules/mouse-move-parallax.js */ "./src/js/modules/mouse-move-parallax.js");
/* harmony import */ var _modules_change_scroll_header_bg_color_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modules/change-scroll-header-bg-color.js */ "./src/js/modules/change-scroll-header-bg-color.js");
/* harmony import */ var _modules_change_scroll_header_hidden_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modules/change-scroll-header-hidden.js */ "./src/js/modules/change-scroll-header-hidden.js");
/* harmony import */ var _modules_header_nav_item_click_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./modules/header-nav-item-click.js */ "./src/js/modules/header-nav-item-click.js");
/* harmony import */ var _modules_burger_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./modules/burger.js */ "./src/js/modules/burger.js");
/* harmony import */ var _modules_video_player_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./modules/video-player.js */ "./src/js/modules/video-player.js");
/* harmony import */ var _modules_courses_actions_buttons_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./modules/courses-actions-buttons.js */ "./src/js/modules/courses-actions-buttons.js");







})();

/******/ })()
;